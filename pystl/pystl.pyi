"""
pystl
"""
from __future__ import annotations
import typing
__all__ = ['TreeDict', 'TreeDictKeyIterator', 'TreeDictReverseKeyIterator']
class TreeDict:
    def __contains__(self, arg0: typing.Any) -> bool:
        ...
    def __delitem__(self, arg0: typing.Any) -> None:
        ...
    def __getitem__(self, key: typing.Any) -> typing.Any:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, mapping: dict[typing.Any, typing.Any]) -> None:
        ...
    @typing.overload
    def __init__(self, iterable: typing.Iterable) -> None:
        ...
    def __iter__(self) -> TreeDictKeyIterator:
        ...
    def __len__(self) -> int:
        ...
    def __repr__(self) -> str:
        ...
    def __reversed__(self) -> TreeDictReverseKeyIterator:
        ...
    def __setitem__(self, key: typing.Any, value: typing.Any) -> None:
        ...
    def __str__(self) -> str:
        ...
    def get(self, key: typing.Any, default: typing.Any = None) -> typing.Any:
        ...
class TreeDictKeyIterator:
    def __iter__(self) -> TreeDictKeyIterator:
        ...
    def __next__(self) -> typing.Any:
        ...
class TreeDictReverseKeyIterator:
    def __iter__(self) -> TreeDictReverseKeyIterator:
        ...
    def __next__(self) -> typing.Any:
        ...
